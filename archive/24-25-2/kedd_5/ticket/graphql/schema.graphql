"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    # ticket(id: ID! @eq): Ticket @find
    ticket(id: ID!): Ticket @field(resolver: "App\\GraphQL\\Queries\\TicketResolver") @guard
}

type Mutation {
    createTicket(
        title: String! @rules(apply: ["string"])
        priority: TicketPriority! @rules(apply: ["integer", "min:0", "max:3"])
        text: String! @rules(apply: ["string"])
    ): Ticket! @guard

    updateTicket(
        id: ID! @whereKey @rules(apply: ["integer", "exists:tickets,id"])
        title: String @rules(apply: ["string"])
        priority: TicketPriority @rules(apply: ["integer", "min:0", "max:3"])
        done: Boolean
    ): Ticket! @update @guard

    deleteTicket(
        id: ID! @whereKey @rules(apply: ["integer", "exists:tickets,id"])
    ): Ticket @delete @guard

    createUser(input: CreateUserInput! @spread): User! @create
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    admin: Boolean!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    tickets: [Ticket]! @belongsToMany
    comments: [Comment]! @hasMany
}

type Ticket {
    id: ID!
    title: String!
    done: Boolean!
    # priority: Int!
    priority: TicketPriority!
    created_at: DateTime!
    updated_at: DateTime!

    users: [User]! @belongsToMany(relation: "users")
    comments: [Comment]! @hasMany(relation: "comments")
}

type Comment {
    id: ID!
    text: String!
    filename: String
    filename_hash: String
    created_at: DateTime!
    updated_at: DateTime!

    ticket: Ticket! @belongsTo(relation: "ticket")
    user: User! @belongsTo(relation: "user")
}

enum TicketPriority {
    LOW @enum(value: 0)
    STANDARD @enum(value: 1)
    HIGH @enum(value: 2)
    IMMEDATE @enum(value: 3)
}

input CreateUserInput {
    name: String!
    email: String! @rules(apply: ["string", "email", "unique:users,email"])
    password: String!
}
